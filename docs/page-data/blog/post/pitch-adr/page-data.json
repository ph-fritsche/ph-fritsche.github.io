{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/post/pitch-adr","result":{"data":{"tags":{"edges":[{"node":{"path":"/blog/tag/gatsby"}},{"node":{"path":"/blog/tag/blog"}},{"node":{"path":"/blog/tag/php"}},{"node":{"path":"/blog/tag/symfony"}},{"node":{"path":"/blog/tag/pitch"}},{"node":{"path":"/blog/tag/react"}},{"node":{"path":"/blog/tag/testing"}},{"node":{"path":"/blog/tag/typescript"}}]},"site":{"siteMetadata":{"author":{"twitter":"ph_fritsche"}}},"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Attune to a higher pitch\",\n  \"tags\": [\"php\", \"symfony\", \"pitch\"],\n  \"image\": \"https://unsplash.com/photos/xIoze9dH4WI\",\n  \"description\": \"Separate concerns and write more concise Controllers by following ADR pattern in your Symfony applications.\\n\",\n  \"date\": \"2021-07-25T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://php.net\"\n  }, \"PHP\"), \" is great for backend development.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"It is fast, it is reliable and it makes it easy to write clean code.\\nThere also are tons of well-written and battle-tested libraries at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://packagist.org\"\n  }, \"Packagist\"), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The language and its ecosystem came a long way from just adding some content to HTML at runtime.\"), mdx(\"p\", null, \"And \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://symfony.com\"\n  }, \"Symfony\"), \" is one of the most mature frameworks out there.\\nIt allows easy setups for small projects and powerful integration with the tools needed in large scale applications.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"But one thing bugged me for a while:\\nSymfony \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://symfony.com/legacy/doc/gentle-introduction/1_4/en/02-Exploring-Symfony-s-Code#chapter_02_the_mvc_pattern\"\n  }, \"follows\"), \" - or better \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://symfony.com/doc/current/create_framework/introduction.html#why-would-you-like-to-create-your-own-framework\"\n  }, \"followed\"), \" - some \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\"\n  }, \"Model-View-Controller pattern\"), \".\\nA \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://symfony.com/doc/current/controller.html\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Controller\")), \" is required to return a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://symfony.com/doc/current/components/http_foundation.html#response\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Response\")), \" object.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"For example when creating an HTML page per \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://symfony.com/doc/current/templates.html#twig-templating-language\"\n  }, \"Twig templates\"), \", the Controller is supposed to call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"twig\"), \" service and apply the appropriate template to any data it wants to return to the client.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"namespace App\\\\Controller;\\n\\nuse Symfony\\\\Component\\\\HttpFoundation\\\\Request;\\nuse Symfony\\\\Bundle\\\\FrameworkBundle\\\\Controller\\\\AbstractController;\\n\\nclass MyController extends AbstractController\\n{\\n    public function __invoke(\\n        Request $request,\\n    ) {\\n        // ... handle request data ...\\n\\n        // ... read from / write to database or other endpoint ...\\n\\n        // ... prepare response data ...\\n\\n        return $this->render('myTemplate.html.twig', [\\n            // some data to use in the template\\n        ]);\\n    }\\n}\\n\")), mdx(\"p\", null, \"Often there can be invalid requests or multiple different outputs so there are multiple calls to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render\"), \" and often enough multiple instances of data preparations.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"This approach quickly bloats the Controller and leads to duplicate code. While there are solutions for repeated code (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.php.net/manual/en/language.oop5.inheritance.php\"\n  }, \"Inheritance\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.php.net/manual/en/language.oop5.traits.php\"\n  }, \"Traits\"), \"), there is another problem with this in my opinion:\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"It mixes different concerns inside the Controller - request handling, data handling and response handling.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Separation of concerns is always underrated.\")), mdx(\"p\", null, \"With \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://packagist.org/?query=pitch%2F\"\n  }, \"Pitch\"), \" I started a collection of packages that helps to boil down the Controller code to just the data handling.  \"), mdx(\"h2\", null, \"Symfony as ADR\"), mdx(\"p\", null, \"One of the lesser known facts is that Symfony does not actually require your Controller to return a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Response\"), \" like it says in the docs.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"If it does not, Symfony dispatches a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kernel.view\"), \" event with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ControllerResult\"), \". Then \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://symfony.com/doc/current/event_dispatcher.html#creating-an-event-subscriber\"\n  }, \"Event Subscribers\"), \" can act on this event and set a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Response\"), \" before Symfony would throw an exception.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"(This \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/sensiolabs/SensioFrameworkExtraBundle/blob/77d892524da1aa7770dd052f02944076bab8e1b2/src/EventListener/TemplateListener.php#L79-L120\"\n  }, \"is for example exploited\"), \" by the popular \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://packagist.org/packages/sensio/framework-extra-bundle\"\n  }, \"sensio/framwork-extra-bundle\"), \" for its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@Template\"), \" annotation.)\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://packagist.org/packages/pitch/symfony-adr\"\n  }, \"Pitch/symfony-adr\"), \", the cornerstone of Pitch package collection, allows you to easily follow \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Action%E2%80%93domain%E2%80%93responder\"\n  }, \"Action-Domain-Responder pattern\"), \" in your Symfony application:\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"It adds a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Responder\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kernel.view\"), \" event and instead of walking through a bunch of Event Subscribers it allows you to register Response Handlers for specific types of return values.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"namespace App\\\\Controller;\\n\\nuse App\\\\Entity\\\\MyEntity;\\n\\nclass MyController\\n{\\n    public function __invoke()\\n    {\\n        // just return e.g. an entity\\n        return new MyEntity();\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"namespace App\\\\Responder;\\n\\nuse App\\\\Entity\\\\MyEntity;\\nuse Pitch\\\\AdrBundle\\\\Responder\\\\ResponseHandlerInterface;\\nuse Pitch\\\\AdrBundle\\\\Responder\\\\ResponsePayloadEvent;\\n\\nclass MyEntityHandler implements ResponseHandlerInterface\\n{\\n    public function getSupportedPayloadTypes(): array\\n    {\\n        return [MyEntity::class];\\n    }\\n\\n    public function handleResponsePayload(ResponsePayloadEvent $event)\\n    {\\n        // Create the appropriate response\\n        // to return MyEntity to the client.\\n        // E.g. convert per Twig.\\n    }\\n}\\n\")), mdx(\"p\", null, \"It also comes with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Graceful\"), \" annotation/configuration that allows you to define which exceptions in your Controllers are supposed to be handled as regular response by a Response Handler.\\nThis allows you to not create the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"try..catch\"), \" blocks in multiple controllers.\"), mdx(\"h2\", null, \"Outlook\"), mdx(\"p\", null, \"The project is still young but I'm really excited about the changes it brings to Symfony applications.\"), mdx(\"p\", null, \"If you like what you see and/or can make use of this in one of your applications, please spread the word!\\nIssues and PRs to improve this are always welcome. :)\"));\n}\n;\nMDXContent.isMDXComponent = true;","meta":{"title":"Attune to a higher pitch","date":"2021-07-25T00:00:00.000Z","tags":["php","symfony","pitch"],"description":"Separate concerns and write more concise Controllers by following ADR pattern in your Symfony applications.\n","image":"https://unsplash.com/photos/xIoze9dH4WI"}}},"pageContext":{"id":"ed0471f6-7bda-52a2-9d23-f887b67e23a8"}},"staticQueryHashes":["1466185270"]}