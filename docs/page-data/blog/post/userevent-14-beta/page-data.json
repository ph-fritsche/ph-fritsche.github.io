{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/post/userevent-14-beta","result":{"data":{"tags":{"edges":[{"node":{"path":"/blog/tag/gatsby"}},{"node":{"path":"/blog/tag/blog"}},{"node":{"path":"/blog/tag/php"}},{"node":{"path":"/blog/tag/symfony"}},{"node":{"path":"/blog/tag/pitch"}},{"node":{"path":"/blog/tag/react"}},{"node":{"path":"/blog/tag/testing"}},{"node":{"path":"/blog/tag/typescript"}}]},"site":{"siteMetadata":{"author":{"twitter":"ph_fritsche"}}},"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"user-event 14 reaches beta\",\n  \"tags\": [\"react\", \"testing\"],\n  \"image\": \"https://unsplash.com/photos/7_kRuX1hSXM\",\n  \"description\": \"The upcoming user-event 14 is ready to be tried out by a larger audience. A quick overview on some new features.\\n\",\n  \"date\": \"2021-11-28T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Version 14 introduces two new APIs: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userEvent.pointer\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userEvent.setup\"), \".\\nWhen publishing the first alpha release, I've written about them \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ph-fritsche.github.io/blog/post/userevent-14\"\n  }, \"here\"), \". These alone are worth migrating to a new version and so this was the opportunity to also implement other changes that might break existing code.\"), mdx(\"p\", null, \"But don't worry: If you don't rely on some unintended or straight up erroneous side effects of the previous implementation, the transition will be simple.\"), mdx(\"h2\", null, \"Asynchronous APIs\"), mdx(\"p\", null, \"This might be the biggest change you'll notice and possibly the only one that requires you to adjust your test code. In the new version all functional APIs of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userEvent\"), \" return a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"userEvent.doSomething()\\n// becomes\\nawait userEvent.doSomething()\\n\")), mdx(\"p\", null, \"The rationale behind this is that while most API calls could also be performed synchronously - certain operations can not.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Therefore some APIs (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"keyboard\"), \") wrapped already asynchronous implementations and needed to conditionally \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"await\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"void\"), \" the internal \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Promise\"), \".\\nWith a growing number of asynchronous implementations this added unnecessary complexity and also blocked some otherwise desirable changes.\"), mdx(\"p\", null, \"As a side effect more people using frameworks with asynchronous rendering might find the call of one of our APIs just working out of the box.\"), mdx(\"h2\", null, \"UI state\"), mdx(\"p\", null, \"The biggest constraints of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user-event\"), \" are a result of trying the impossible:\\nWe simulate what normally is the result of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"trusted event\"), \" that can not be created or controlled programmatically.\"), mdx(\"p\", null, \"See for example the selection on an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<input type=\\\"number\\\">\"), \" element:\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"If you select one of the digits and then press \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Backspace\"), \", you'll delete that digit.  \"), mdx(\"input\", {\n    type: \"number\",\n    defaultValue: \"123\"\n  }), mdx(\"p\", null, \"But here's the catch: The selection on the element exists only for the UI. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"selectionStart\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"selectionEnd\"), \" properties are not implemented on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"number\"), \" inputs. There is no programmatic selection for this kind of element.\"), mdx(\"p\", null, \"After previous versions tried to tweak what our APIs would do so that the behavior might more closely immitate what our users expect, the new version implements these UI features on top of the DOM and then let the API implementations act upon these UI features.\"), mdx(\"p\", null, \"But why should you be bothered by this? Well for a start this means our new implementations now promise to do exactly what they tell you they're doing - no hidden workarounds that are applied on special occasions.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"This also means that you are able to use these UI features across different API calls as you can see in the next section...\"), mdx(\"h2\", null, \"Select per pointer\"), mdx(\"p\", null, \"The new version allows you to set a selection per dragging the primary pointer device like the user does.\"), mdx(\"p\", null, \"This allows to test exactly the scenario described above and select and overwrite the second digit on a number field:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const user = userEvent.setup()\\nconst input = screen.getByRole('spinbutton')\\n\\nawait user.pointer([\\n    // Press the primary mouse button at offset 1\\n    {keys: '[MouseLeft>]', target: input, offset: 1},\\n    // Select the second digit by moving the mouse to offset 2\\n    {offset: 2},\\n    // Optional: release the primary mouse button\\n    '[/MouseLeft]',\\n])\\n// The keyboard honors the current selection\\nawait user.keyboard('[Backspace]')\\n\\nexpect(input).toHaveValue(13)\\n\")), mdx(\"p\", null, \"It also allows to select a word per \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userEvent.dblClick\"), \" or a line of text per the new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userEvent.tripleClick\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Select the whole number input\\nawait user.tripleClick(input)\\n\\nawait user.keyboard('9')\\n\\nexpect(input).toHaveValue(9)\\n\")), mdx(\"h2\", null, \"Event init\"), mdx(\"p\", null, \"The new version honors the device states across different calls (at least if you use the APIs per \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setup\"), \" instead of creating a new state each call).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const user = userEvent.setup()\\n\\n// Perform a click with ctrlKey=true\\nawait user.keyboard('[ControlLeft>]')\\nawait user.pointer('[MouseLeft]')\\n\")), mdx(\"p\", null, \"This (and some smaller changes along the way) removed the use case for user supplied event properties on our API calls, so we removed the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"init\"), \" parameters from all our APIs.\"), mdx(\"h2\", null, \"Selection outside of input elements\"), mdx(\"p\", null, \"The new versions implements its selection and input handling on top of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/Selection\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Selection\"), \" API\"), \". Therefore all user interactions are applied in accordance with any calls your components make to that API.\"), mdx(\"p\", null, \"This resolved some long-running issues with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"contenteditable\"), \" elements as well.\"), mdx(\"h2\", null, \"Clipboard\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userEvent.paste\"), \" API has been replaced so that it acts on the current active element and selection. Also \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userEvent.copy\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userEvent.cut\"), \" have been added.\"), mdx(\"p\", null, \"This allows you to properly test user workflows that involve copy/cut & paste.\"), mdx(\"p\", null, \"You can either get/set the data through the APIs:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Paste \\\"foo\\\" at the current cursor position / selection\\nawait userEvent.paste('foo')\\n\\n// Copy whatever is currently selected\\nconst dataTransfer = await userEvent.copy()\\n\")), mdx(\"p\", null, \"Or you can interact with the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Clipboard\"), \" API\"), \":\\nOur \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setup\"), \" function automatically replaces \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"navigator.clipboard\"), \" with a stub as the real \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Clipboard\"), \" is not available in Jsdom and heavily limited or unavailable in browser test environments.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const user = userEvent.setup()\\n\\n// Paste the clipboard content\\nawait user.paste()\\n// Copy the current selection\\nawait user.copy()\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Contributing\"), mdx(\"p\", null, \"I hope you'll enjoy the new features as much as I do.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"As new implementations almost always result in new issues and possibilities, any contribution - including bug reports - is more than welcome.\\nIf you'd like to discuss and shape the future of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user-event\"), \", please \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://discord.com/channels/723559267868737556/898557003893469224\"\n  }, \"join us at Discord\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","meta":{"title":"user-event 14 reaches beta","date":"2021-11-28T00:00:00.000Z","tags":["react","testing"],"description":"The upcoming user-event 14 is ready to be tried out by a larger audience. A quick overview on some new features.\n","image":"https://unsplash.com/photos/7_kRuX1hSXM"}}},"pageContext":{"id":"b164fe54-e353-5dd9-8687-e02e0f0a45fc"}},"staticQueryHashes":["1466185270"]}