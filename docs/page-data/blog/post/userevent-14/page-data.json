{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/post/userevent-14","result":{"data":{"tags":{"edges":[{"node":{"path":"/blog/tag/gatsby"}},{"node":{"path":"/blog/tag/blog"}},{"node":{"path":"/blog/tag/php"}},{"node":{"path":"/blog/tag/symfony"}},{"node":{"path":"/blog/tag/pitch"}},{"node":{"path":"/blog/tag/react"}},{"node":{"path":"/blog/tag/testing"}},{"node":{"path":"/blog/tag/typescript"}}]},"site":{"siteMetadata":{"author":{"twitter":"ph_fritsche"}}},"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Testing with user-event 14\",\n  \"tags\": [\"react\", \"testing\"],\n  \"image\": \"https://unsplash.com/photos/yITP9KQqqkQ\",\n  \"description\": \"Testing Library's user-event package helps you increase the confidence gained from your tests. Let's take a look at the upcoming version.\\n\",\n  \"date\": \"2021-10-21T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/testing-library/user-event\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"@testing-library/user-event\")), \" is all about describing user interaction in your integration tests. This is different from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://testing-library.com/docs/dom-testing-library/api-events#fireevent\"\n  }, \"directly firing the events\"), \" you wrote handlers for as it allows to reassure your assumptions about the events which are actually fired on a perceived user interaction as well as catch event handlers interfering with each other.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"While it can not replace e2e testing, it can heavily increase the confidence you gain from your tests.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userEvent@14\"), \" is the next step on that mission.\"), mdx(\"h2\", null, \"Setup\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user-event\"), \" implements a few workarounds on the DOM provided by your test environment so that it can simulate manipulating displayed values that are not normally available programmatically (e.g. selecting and overwriting a character in an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<input type=\\\"number\\\"/>\"), \"input).\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Previously these workarounds were applied during calls to one of the userEvent APIs which might lead to changes before/between API calls not being recognized by the implementation.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The new \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userEvent.setup\"), \" allows you to prepare the document for interacting per \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user-event\"), \" APIs right when you set up your test.\"), mdx(\"p\", null, \"It returns the userEvent APIs you already know, but it also applies your default options to each of the API calls and reapplies the input device state (e.g. a key being pressed down) to the next call.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// Note that this could be used with any Testing Library framework\\nimport { render, screen } from '@testing-library/react'\\nimport { setup } from '@testing-library/user-event'\\n\\nconst user = setup({\\n    // Some defaults ...\\n    skipPointerEventsCheck: true,\\n    // This could also e.g. include a localized keyboard mapping:\\n    keyboardMap: [\\n        // German keyboard with the double quotes on [Digit2]\\n        {key: '\\\"', code: 'Digit2', shiftKey: true},\\n        // ...\\n    ],\\n})\\n\\ntest('use the api from setup', async () => {\\n    render(<MyComponent/>)\\n\\n    // This skips the check for `pointer-events: none`\\n    await user.click(screen.getByLabelText('What happened?'))\\n\\n    // This now dispatches key events for [Digit2] for the double quotes\\n    await user.keyboard('Bar shouted: \\\"baz\\\"')\\n\\n    // If you want to, you can always override a default:\\n    await user.click(screen.getByRole('button'), undefined, {skipPointerEventsCheck: false})\\n\\n    // Or you can change some defaults for a bunch of calls:\\n    const withPointerCheck = user.setup({skipPointerEventsCheck: true})\\n    await withPointerCheck.click(screen.getByRole('button'))\\n\\n    // The APIs automatically share the input device state\\n    await user.keyboard('{Shift>}')\\n    await user.keyboard('a') // shiftKey: true\\n\\n    // ...\\n})\\n\")), mdx(\"p\", null, \"I recommend to use the APIs provided by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setup\"), \" whenever you test a user workflow on a component as it can move configuration out of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://wiki.c2.com/?ArrangeActAssert\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Act\")), \" and improve readability of the test.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setup\"), \" on the document also gives us at Testing Library an entry point to apply (future) workarounds for kinks of testing environments we might not know yet. This means your automated test can alert you about problems in your implementation or false assumptions in your tests as the test environment and tools are upgraded.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"And in the end alerting about possible problems - ideally before any consumer notices them - is the main feat of automated tests, isn't it?\"), mdx(\"h2\", null, \"Pointer\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user-event@13\"), \" introduced the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userEvent.keyboard\"), \" API which allows to describe any user interaction per keyboard and internally replaced the old implementation for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userEvent.type\"), \".\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"So it is only fitting that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user-event@14\"), \" comes with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"userEvent.pointer\"), \" API which does the same for user interaction per pointer devices.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Yes, you're correct! \\\"Device\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"s\"), \"\\\" implies that you will be able to simulate the events for user interaction per touchscreen or stylus.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// Move the mouse over an element\\nawait user.pointer({target: screen.getByRole('button')})\\n\\n// Double click at current position\\nawait user.pointer('[MouseLeft][MouseLeft]')\\n\\n// Multiple actions that are performed in one sequence like a swipe\\nawait user.pointer([\\n    {\\n        keys: '[TouchA]',\\n        target: screen.getByLabelText('Swipe here!'),\\n        coords: {x: 100, y: 50},\\n    },\\n    {pointerName: 'TouchA', coords: {x: 150, y: 50}},\\n    '[/TouchA]',\\n])\\n\\n// Pressing keys manipulates pointer events\\nawait user.keyboard('[ShiftLeft>]')\\nawait user.pointer('[MouseLeft]') // a click with shiftKey=true\\n\")), mdx(\"p\", null, \"There are some limitations to simulating pointer events that we won't be able to change though.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Our primary target audience tests per \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jest\"), \" in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsdom\"), \" environment and there is no layout in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jsdom\"), \". This means that different from your browser the elements don't exist in a specific position, layer and size. We won't be able to determine if the pointer action you describe is possible in your layout. If you tell \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user-event\"), \" that the user clicks on a button which in reality is hidden behind a massive advertisement banner, we won't be able to tell you that this \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"can not\"), \" work.\"), mdx(\"p\", null, \"Remember? It wasn't our mission to replace e2e tests. You should probably still run \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://kentcdodds.com/blog/write-tests\"\n  }, \"a few\"), \" of those.\\nBut with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user-event@14\"), \" you can gain more from running integration tests that check your handling of pointer events.\"));\n}\n;\nMDXContent.isMDXComponent = true;","meta":{"title":"Testing with user-event 14","date":"2021-10-21T00:00:00.000Z","tags":["react","testing"],"description":"Testing Library's user-event package helps you increase the confidence gained from your tests. Let's take a look at the upcoming version.\n","image":"https://unsplash.com/photos/yITP9KQqqkQ"}}},"pageContext":{"id":"ebfaf190-be48-52b6-86f9-16037cec81a7"}},"staticQueryHashes":["1466185270"]}